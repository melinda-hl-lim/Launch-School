Q1. What do you expect the code to print out?

    numbers = [1, 2, 2, 3]
    numbers.uniq

    puts numbers

A1. The output will be an array with the value [1,2,3].


Q2. Describe the difference between ! and ? in Ruby.

A2. Within method names, the ! symbol signifies that a method will modify the calling or argument object, while the ? symbol shows that the method will return a boolean value.

In the language, the ! symbol negates the truthiness of an object following it. I don't think the ? symbol has anything sideeffect on objects near it.

Q2. And explain what would happen in the following scenarios:

A2. - what is != and where should you use it?
        The != is a "not equals to" symbol and should be used in comparisons expecting a boolean response.
    - put ! before something, like !user_name
        Putting ! before user_name would negate the truthiness of user_name. Therefore if user_name was a value like "Bob", !user_name would return false; however, if user_name was nil, !user_name would return true.
    - put ! after something, like words.uniq!
        Putting ! after something doesn't modify how the object and/or method call would act. It usually shows that the method (such as uniq in this case) would modify the method caller.
    - put ? before something
        I don't think putting a ? symbol before something changes its behaviour.
    - put ? after something
        Putting a ? symbol after a method name shows the user that the method returns a boolean value.
    - put !! before something, like !!user_name
        The truthiness of the object is shown. One ! symbol negates the truthiness of the object, so two !! symbols reverts the output back to the original truthiness of the object.


Q3. Replace the word "important" with "urgent" in this string:
    advice = "Few things in life are as important as house training your pet dinosaur."

A3. advice.gsub!("important", "urgent")


Q4. The Ruby Array class has several methods for removing items from the array. Two of them have very similar names. Let's see how they differ. Given array:

    numbers = [1, 2, 3, 4, 5]

What do the following method calls do (assume we reset numbers to the original array between method calls)?

A4. - numbers.delete_at(1)
        The delete_at() method returns an array with the element at index 1 deleted. So we would get:
            [1,3,4,5]
    - numbers.delete(1)
        The delete() method deletes any occurance of the argument 1 in the array. So we would get:
            [2,3,4,5]
    Both methods mutate the original array, numbers.
    Both methods return the value that was removed from the array.


Q5. Programmatically determine if 42 lies between 10 and 100.

A5. Completed in irb:
 > range = 10..100
=> 10..100
 > range.include?(42)
=> true


Q6. Starting with the string:
    famous_words = "seven years ago..."
show two different ways to put the expected "Four score and " in front of it.

A6. Completed in irb:
 > famous_words.prepend("Four score and ")
or
 > famous_words.insert(0, "Four score and ")
=> "Four score and seven years ago..."


Q7. Fun with gsub... Please see exercise for exact problem.

A7. 42


Q8. Flatten the following array:
    flintstones = ["Fred", "Wilma", ["Barney", "Betty"], ["BamBam", "Pebbles"]]

A8. flintstones.flatten!


Q9. Given the hash below
    flintstones = { "Fred" => 0, "Wilma" => 1, "Barney" => 2, "Betty" => 3, "BamBam" => 4, "Pebbles" => 5 }
Turn this into an array containing only two elements: Barney's name and Barney's number

A9. flintstones.delete_if {|key, value| key != "Barney" }
